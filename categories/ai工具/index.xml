<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AI工具 on jaxiu He</title>
    <link>https://axfinn.github.io/categories/ai%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in AI工具 on jaxiu He</description>
    <generator>Hugo</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Fri, 01 Aug 2025 18:20:00 +0800</lastBuildDate>
    <atom:link href="https://axfinn.github.io/categories/ai%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DeepChat MCP 支持实现详解：打造强大的 AI 工具生态系统</title>
      <link>https://axfinn.github.io/blog/2025-08/deepchat-mcp-implementation/</link>
      <pubDate>Fri, 01 Aug 2025 18:20:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2025-08/deepchat-mcp-implementation/</guid>
      <description>&lt;h1 id=&#34;deepchat-mcp-支持实现详解打造强大的-ai-工具生态系统&#34;&gt;DeepChat MCP 支持实现详解：打造强大的 AI 工具生态系统&lt;/h1&gt;&#xA;&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;随着大语言模型（LLM）的发展，单纯的文本生成能力已经无法满足复杂应用场景的需求。Model Context Protocol（MCP）作为一种新兴的标准化协议，为 LLM 提供了访问外部工具和资源的能力，极大地扩展了 AI 应用的可能性。DeepChat 作为先进的 AI 聊天平台，对 MCP 协议提供了完整而深入的支持，本文将详细解析 DeepChat 中 MCP 的实现机制。&lt;/p&gt;&#xA;&lt;h2 id=&#34;mcp-协议简介&#34;&gt;MCP 协议简介&lt;/h2&gt;&#xA;&lt;p&gt;Model Context Protocol（MCP）是一个开放协议，旨在标准化 LLM 与外部工具、资源和提示之间的交互方式。MCP 定义了三种核心能力：&lt;/p&gt;</description>
    </item>
    <item>
      <title>DeepChat 项目概览：多模型AI对话平台介绍</title>
      <link>https://axfinn.github.io/blog/2025-08/deepchat-project-overview/</link>
      <pubDate>Fri, 01 Aug 2025 18:00:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2025-08/deepchat-project-overview/</guid>
      <description>&lt;h1 id=&#34;deepchat-项目概览多模型ai对话平台介绍&#34;&gt;DeepChat 项目概览：多模型AI对话平台介绍&lt;/h1&gt;&#xA;&lt;h2 id=&#34;什么是-deepchat&#34;&gt;什么是 DeepChat？&lt;/h2&gt;&#xA;&lt;p&gt;DeepChat 是一个功能丰富的开源 AI 聊天平台，支持多种云端和本地大语言模型，具备强大的搜索增强和工具调用能力。作为一个跨平台的 AI 助手应用程序，DeepChat 不仅支持基本的聊天功能，还提供了诸如搜索增强、工具调用和多模态交互等高级功能，让 AI 能力更加触手可及和高效。&lt;/p&gt;&#xA;&lt;p&gt;无论您是使用 OpenAI、Gemini、Anthropic 等云 API，还是本地部署的 Ollama 模型，DeepChat 都能提供流畅的用户体验。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Qwen Code CLI 使用详解</title>
      <link>https://axfinn.github.io/blog/2025-07/qwen-code-cli-usage/</link>
      <pubDate>Wed, 23 Jul 2025 15:45:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2025-07/qwen-code-cli-usage/</guid>
      <description>&lt;h1 id=&#34;qwen-code-cli-使用详解&#34;&gt;Qwen Code CLI 使用详解&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cli-入门&#34;&gt;CLI 入门&lt;/h2&gt;&#xA;&lt;p&gt;Qwen Code 是一个功能强大的命令行 AI 工作流工具，为开发者提供了一种全新的与代码交互的方式。通过 CLI，用户可以与 AI 进行对话，执行各种编程任务。&lt;/p&gt;&#xA;&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;&#xA;&lt;p&gt;确保您已经安装了 Node.js 20+ 版本，然后通过 npm 安装 Qwen Code：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install -g @qwen-code/qwen-code&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;基本使用&#34;&gt;基本使用&lt;/h3&gt;&#xA;&lt;p&gt;安装完成后，您可以通过以下命令启动 Qwen Code：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;qwen-code&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将启动交互式 CLI 会话，您可以直接与 AI 进行对话。&lt;/p&gt;&#xA;&lt;h3 id=&#34;非交互式使用&#34;&gt;非交互式使用&lt;/h3&gt;&#xA;&lt;p&gt;您也可以通过管道或重定向将输入传递给 Qwen Code：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;帮我生成一个 React 组件&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; qwen-code&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cli-入口实现&#34;&gt;CLI 入口实现&lt;/h2&gt;&#xA;&lt;p&gt;Qwen Code 的 CLI 入口是一个基于 React 和 Ink 构建的命令行应用程序。主要特性包括：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Qwen Code 工具详解</title>
      <link>https://axfinn.github.io/blog/2025-07/qwen-code-tools-detailed/</link>
      <pubDate>Wed, 23 Jul 2025 15:30:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2025-07/qwen-code-tools-detailed/</guid>
      <description>&lt;h1 id=&#34;qwen-code-工具详解&#34;&gt;Qwen Code 工具详解&lt;/h1&gt;&#xA;&lt;h2 id=&#34;工具概览&#34;&gt;工具概览&lt;/h2&gt;&#xA;&lt;p&gt;Qwen Code 提供了一套丰富的工具集，允许 AI 模型与本地环境进行交互、执行命令、访问文件和执行各种操作。这些工具通过确认提示和沙箱机制确保安全性。&lt;/p&gt;&#xA;&lt;p&gt;工具集的分类可以用下图表示：&lt;/p&gt;&#xA;&lt;div class=&#34;mermaid&#34;&gt;&#xA;&#xA;graph TD&#xA;    A[Qwen Code 工具集] --&gt; B[文件系统工具]&#xA;    A --&gt; C[网络工具]&#xA;    A --&gt; D[其他工具]&#xA;    &#xA;    B --&gt; B1[list_directory]&#xA;    B --&gt; B2[read_file]&#xA;    B --&gt; B3[write_file]&#xA;    B --&gt; B4[glob]&#xA;    B --&gt; B5[search_file_content]&#xA;    B --&gt; B6[replace]&#xA;    &#xA;    C --&gt; C1[google_web_search]&#xA;    C --&gt; C2[web_fetch]&#xA;    &#xA;    D --&gt; D1[save_memory]&#xA;    D --&gt; D2[run_shell_command]&#xA;    D --&gt; D3[MCP 服务器工具]&#xA;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;文件系统工具&#34;&gt;文件系统工具&lt;/h2&gt;&#xA;&lt;p&gt;Qwen Code 提供了完整的文件系统操作工具：&lt;/p&gt;&#xA;&lt;h3 id=&#34;list_directory列出目录内容&#34;&gt;&lt;code&gt;list_directory&lt;/code&gt;：列出目录内容&lt;/h3&gt;&#xA;&lt;p&gt;参数：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;path&lt;/code&gt; (string, required): 要列出的目录的绝对路径&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ignore&lt;/code&gt; (array, optional): 要忽略的 glob 模式列表&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;respect_git_ignore&lt;/code&gt; (boolean, optional): 是否遵循 .gitignore 模式，默认为 true&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;功能：显示指定目录下的文件和子目录&lt;/p&gt;</description>
    </item>
    <item>
      <title>Qwen Code 项目概览</title>
      <link>https://axfinn.github.io/blog/2025-07/qwen-code-project-overview/</link>
      <pubDate>Wed, 23 Jul 2025 15:00:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2025-07/qwen-code-project-overview/</guid>
      <description>&lt;h1 id=&#34;qwen-code-项目概览&#34;&gt;Qwen Code 项目概览&lt;/h1&gt;&#xA;&lt;h2 id=&#34;什么是-qwen-code&#34;&gt;什么是 Qwen Code？&lt;/h2&gt;&#xA;&lt;p&gt;Qwen Code 是一个基于 Gemini CLI 改造的命令行 AI 工作流工具，专为 Qwen3-Coder 模型优化，具有增强的解析器和工具支持。该项目的主要目标是为开发者提供一个强大的命令行界面，让他们能够利用 AI 的能力来完成各种编程任务。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌─────────────────────────────────────┐&#xA;│           Qwen Code 架构            │&#xA;├─────────────────────────────────────┤&#xA;│  ┌─────────────┐  ┌──────────────┐ │&#xA;│  │   CLI 界面   │  │  核心引擎     │ │&#xA;│  └─────────────┘  └──────────────┘ │&#xA;│        │               │           │&#xA;│        ▼               ▼           │&#xA;│  ┌─────────────┐  ┌──────────────┐ │&#xA;│  │  用户输入    │  │  AI 模型接口  │ │&#xA;│  └─────────────┘  └──────────────┘ │&#xA;│        │               │           │&#xA;│        ▼               ▼           │&#xA;│  ┌───────────────────────────────┐ │&#xA;│  │        工具执行层              │ │&#xA;│  │  - 文件系统操作                │ │&#xA;│  │  - 网络请求                   │ │&#xA;│  │  - 命令执行                   │ │&#xA;│  │  - 内存管理                   │ │&#xA;│  └───────────────────────────────┘ │&#xA;└─────────────────────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;核心特性&#34;&gt;核心特性&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;超越上下文限制的代码理解和编辑&lt;/strong&gt;：Qwen Code 可以处理大型代码库，不受传统模型上下文长度的限制。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;工作流自动化&lt;/strong&gt;：支持复杂的开发任务自动化，提高开发效率。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;增强的解析器&lt;/strong&gt;：改进了对代码结构的理解能力，能够更准确地解析和处理代码。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;丰富的工具集&lt;/strong&gt;：提供多种工具，包括文件系统访问、网络搜索、多文件处理等。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;安装要求&#34;&gt;安装要求&lt;/h3&gt;&#xA;&lt;p&gt;Qwen Code 需要 Node.js 20+ 版本。可以通过 npm 或从源代码安装：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
