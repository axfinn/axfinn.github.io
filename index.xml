<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jaxiu He</title>
    <link>https://axfinn.github.io/</link>
    <description>Recent content on jaxiu He</description>
    <generator>Hugo</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Fri, 18 Jul 2025 19:15:00 +0800</lastBuildDate>
    <atom:link href="https://axfinn.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NPS 全景解析（完结）：揭秘功能强大的 Web 管理界面</title>
      <link>https://axfinn.github.io/blog/2025-07/nps-%E5%85%A8%E6%99%AF%E8%A7%A3%E6%9E%90%E5%AE%8C%E7%BB%93%E6%8F%AD%E7%A7%98%E5%8A%9F%E8%83%BD%E5%BC%BA%E5%A4%A7%E7%9A%84-web-%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2/</link>
      <pubDate>Fri, 18 Jul 2025 19:15:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2025-07/nps-%E5%85%A8%E6%99%AF%E8%A7%A3%E6%9E%90%E5%AE%8C%E7%BB%93%E6%8F%AD%E7%A7%98%E5%8A%9F%E8%83%BD%E5%BC%BA%E5%A4%A7%E7%9A%84-web-%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;一个工具的强大与否，不仅取决于其核心功能的性能与稳定，也取决于其易用性。NPS 之所以广受欢迎，除了其强大的穿透能力外，一个直观、功能全面的 Web 管理界面功不可没。用户无需编辑复杂的配置文件，只需在浏览器上进行简单的点击操作，就能完成客户端管理、隧道配置、域名绑定等所有操作。在本系列文章的最后一篇，我们将深入 &lt;code&gt;nps/web&lt;/code&gt; 目录，揭秘这个基于 Beego 框架构建的 Web 管理界面是如何与 NPS 核心服务无缝集成，为用户提供流畅体验的。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;技术选型beego-框架&#34;&gt;技术选型：Beego 框架&lt;/h2&gt;&#xA;&lt;p&gt;NPS 的 Web 后端采用了 &lt;a href=&#34;https://github.com/beego/beego&#34;&gt;Beego&lt;/a&gt;，一个用 Go 语言编写的高性能 Web 框架。Beego 遵循 MVC（Model-View-Controller）设计模式，提供了路由、模板引擎、ORM、Session 管理等一整套 Web 开发所需的功能，这使得开发者可以快速构建起一个功能完善的 Web 应用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 核心探秘：配置加载与数据持久化</title>
      <link>https://axfinn.github.io/blog/2025-07/nps-%E6%A0%B8%E5%BF%83%E6%8E%A2%E7%A7%98%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Fri, 18 Jul 2025 19:10:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2025-07/nps-%E6%A0%B8%E5%BF%83%E6%8E%A2%E7%A7%98%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;一个稳定可靠的服务，离不开健全的配置管理和数据持久化机制。NPS 作为一个需要长期运行的内网穿透服务器，必须能够加载启动配置、在运行时动态修改配置，并在服务重启后恢复所有任务和客户端信息。这一切都由 &lt;code&gt;nps/file&lt;/code&gt; 目录下的代码实现。本篇文章将深入这一模块，剖析 NPS 是如何通过简单的 JSON 文件，构建出一个轻量级且高效的“数据库”，并实现对客户端、隧道、主机等所有配置的增删改查和持久化存储。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;filegonps-的数据中枢&#34;&gt;&lt;code&gt;file.go&lt;/code&gt;：NPS 的数据中枢&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;nps/file&lt;/code&gt; 目录的核心是 &lt;code&gt;file.go&lt;/code&gt; 文件，它定义了 NPS 的数据模型和所有数据操作的接口。NPS 并未采用传统的关系型数据库或 NoSQL 数据库，而是选择使用 JSON 文件作为其数据存储后端，这使得 NPS 非常轻量、易于部署和迁移。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 客户端深度解析：健康检查与动态注册</title>
      <link>https://axfinn.github.io/blog/2025-07/nps-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/</link>
      <pubDate>Fri, 18 Jul 2025 19:05:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2025-07/nps-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在前面的文章中，我们已经剖析了 NPS 客户端的核心逻辑（&lt;code&gt;client.go&lt;/code&gt;）和控制模块（&lt;code&gt;control.go&lt;/code&gt;）。我们了解到客户端如何与服务端建立连接、如何通过多路复用隧道转发流量，以及如何从配置文件启动。然而，一个成熟的系统不仅需要核心功能，还需要完善的辅助机制来保证其在复杂多变的生产环境中的稳定性和灵活性。本篇文章将深入 NPS 客户端的另外两个重要文件：&lt;code&gt;nps/client/health.go&lt;/code&gt; 和 &lt;code&gt;nps/client/register.go&lt;/code&gt;，探讨 NPS 是如何实现对后端服务的健康检查以及支持客户端动态注册的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 核心组件：深入剖析 Bridge 模块</title>
      <link>https://axfinn.github.io/blog/2025-07/nps-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90-bridge-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 18 Jul 2025 19:00:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2025-07/nps-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90-bridge-%E6%A8%A1%E5%9D%97/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 的服务端架构中，&lt;code&gt;proxy&lt;/code&gt; 模块负责监听公网端口并处理各种协议的流量，而 &lt;code&gt;client&lt;/code&gt; 模块则在内网中连接本地服务。那么，当一个公网请求到达 &lt;code&gt;proxy&lt;/code&gt; 模块后，它是如何精确地找到对应的内网客户端，并与之建立一条数据通道的呢？答案就是 &lt;strong&gt;&lt;code&gt;Bridge&lt;/code&gt; 模块&lt;/strong&gt;。&lt;code&gt;Bridge&lt;/code&gt; 是 NPS 服务端的核心枢纽，它负责维护所有客户端的长连接，并在此之上建立控制和数据隧道，是整个 NPS 体系的“交通总指挥”。&lt;/p&gt;&#xA;&lt;h2 id=&#34;bridge-结构体通信枢纽的核心&#34;&gt;&lt;code&gt;Bridge&lt;/code&gt; 结构体：通信枢纽的核心&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;bridge.go&lt;/code&gt; 文件首先定义了 &lt;code&gt;Bridge&lt;/code&gt; 结构体，它包含了 &lt;code&gt;Bridge&lt;/code&gt; 模块运行所需的所有关键信息：&lt;/p&gt;</description>
    </item>
    <item>
      <title>打造你的专属数字工作台：My Tool Dashboard 的设计与实践</title>
      <link>https://axfinn.github.io/blog/2025-07/%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9E%E6%95%B0%E5%AD%97%E5%B7%A5%E4%BD%9C%E5%8F%B0my-tool-dashboard-%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://axfinn.github.io/blog/2025-07/%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9E%E6%95%B0%E5%AD%97%E5%B7%A5%E4%BD%9C%E5%8F%B0my-tool-dashboard-%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h2 id=&#34;挑战散乱的数字工具与低效的工作流&#34;&gt;挑战：散乱的数字工具与低效的工作流&lt;/h2&gt;&#xA;&lt;p&gt;在数字化的今天，我们每个人都离不开各种在线工具：文档协作、代码托管、设计资源、数据分析……然而，随着工具数量的增长，我们常常面临以下痛点：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;工具分散&lt;/strong&gt;：常用的工具散落在浏览器收藏夹、各种笔记应用中，查找和访问效率低下。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;界面单调&lt;/strong&gt;：传统的导航页或浏览器主页功能单一，缺乏个性化和互动性，无法激发使用兴趣。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;缺乏统一管理&lt;/strong&gt;：难以集中管理和快速切换不同类别的工具，导致工作流碎片化。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;隐私与定制化不足&lt;/strong&gt;：许多在线工具导航页无法满足个人对界面、功能和数据隐私的深度定制需求。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;为了解决这些问题，我们构思并实现了一个高度可定制的个人工具导航页——&lt;strong&gt;My Tool Dashboard&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建智能客服大脑：一个链式处理AI Agent的实践与思考</title>
      <link>https://axfinn.github.io/blog/2025-07/%E6%9E%84%E5%BB%BA%E6%99%BA%E8%83%BD%E5%AE%A2%E6%9C%8D%E5%A4%A7%E8%84%91%E4%B8%80%E4%B8%AA%E9%93%BE%E5%BC%8F%E5%A4%84%E7%90%86ai-agent%E7%9A%84%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/</link>
      <pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://axfinn.github.io/blog/2025-07/%E6%9E%84%E5%BB%BA%E6%99%BA%E8%83%BD%E5%AE%A2%E6%9C%8D%E5%A4%A7%E8%84%91%E4%B8%80%E4%B8%AA%E9%93%BE%E5%BC%8F%E5%A4%84%E7%90%86ai-agent%E7%9A%84%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/</guid>
      <description>&lt;h2 id=&#34;挑战复杂客户投诉处理的痛点&#34;&gt;挑战：复杂客户投诉处理的痛点&lt;/h2&gt;&#xA;&lt;p&gt;在互联网服务的日常运营中，客户投诉是不可避免的一环。然而，许多投诉并非简单问题，尤其当它们涉及复杂的系统交互时，例如用户反馈“直播卡顿，需要查看日志并进行全链路分析”。这类问题往往需要：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;多源信息收集&lt;/strong&gt;：从日志系统、监控平台、用户行为数据等多个渠道获取信息。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;跨系统关联分析&lt;/strong&gt;：根据一个关键标识（如 &lt;code&gt;trace_id&lt;/code&gt;），关联不同服务间的调用链路。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;动态决策与任务分解&lt;/strong&gt;：根据初步分析结果，动态决定下一步需要执行的任务（例如，发现新的关联服务后，需要生成新的查询任务）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;人工经验依赖&lt;/strong&gt;：整个过程高度依赖运维或客服人员的经验，效率低下且容易出错。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;为了解决这些痛点，我们设计并实现了一个&lt;strong&gt;链式处理AI Agent&lt;/strong&gt;，旨在将这一复杂、多步骤的客户投诉处理流程自动化、智能化。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建智能运维大脑：一个可动态发现任务的AI智能体实践</title>
      <link>https://axfinn.github.io/blog/2025-07/%E6%9E%84%E5%BB%BA%E6%99%BA%E8%83%BD%E8%BF%90%E7%BB%B4%E5%A4%A7%E8%84%91%E4%B8%80%E4%B8%AA%E5%8F%AF%E5%8A%A8%E6%80%81%E5%8F%91%E7%8E%B0%E4%BB%BB%E5%8A%A1%E7%9A%84ai%E6%99%BA%E8%83%BD%E4%BD%93%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://axfinn.github.io/blog/2025-07/%E6%9E%84%E5%BB%BA%E6%99%BA%E8%83%BD%E8%BF%90%E7%BB%B4%E5%A4%A7%E8%84%91%E4%B8%80%E4%B8%AA%E5%8F%AF%E5%8A%A8%E6%80%81%E5%8F%91%E7%8E%B0%E4%BB%BB%E5%8A%A1%E7%9A%84ai%E6%99%BA%E8%83%BD%E4%BD%93%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h2 id=&#34;挑战复杂运维场景下的全链路分析困境&#34;&gt;挑战：复杂运维场景下的“全链路分析”困境&lt;/h2&gt;&#xA;&lt;p&gt;在大型互联网服务的日常运维中，我们经常面临这样的场景：用户反馈某个服务出现异常，例如“&lt;code&gt;live.live.app-blink&lt;/code&gt; 服务报错，需要查看错误日志并进行全链路分析”。&lt;/p&gt;&#xA;&lt;p&gt;这看似简单的需求，背后却隐藏着一个复杂且耗时的工作流：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;日志初筛&lt;/strong&gt;：首先，需要从海量日志中精准定位到指定服务的错误日志。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;信息提取&lt;/strong&gt;：从日志中抽取出关键标识，例如 &lt;code&gt;trace_id&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;关联发现&lt;/strong&gt;：基于 &lt;code&gt;trace_id&lt;/code&gt;，需要进一步查询所有相关的上游和下游服务。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;任务分解&lt;/strong&gt;：为每个关联服务生成新的日志查询或指标分析任务。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;并行执行&lt;/strong&gt;：同时执行这些分散的任务。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;结果聚合&lt;/strong&gt;：将所有任务的结果汇总，形成一份完整的全链路分析报告。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这个过程不仅需要人工介入大量查询和判断，而且效率低下，容易出错。为了解决这一痛点，我们构思并实现了一个&lt;strong&gt;链式处理AI智能体&lt;/strong&gt;，旨在将这一复杂流程自动化、智能化。&lt;/p&gt;</description>
    </item>
    <item>
      <title>One Test</title>
      <link>https://axfinn.github.io/blog/2025-04/one-test/</link>
      <pubDate>Thu, 03 Apr 2025 17:12:13 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2025-04/one-test/</guid>
      <description>This is an example of adding an intro picture to the post.</description>
    </item>
    <item>
      <title>NPS 客户端辅助模块：控制与 P2P 打洞细节</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97%E6%8E%A7%E5%88%B6%E4%B8%8E-p2p-%E6%89%93%E6%B4%9E%E7%BB%86%E8%8A%82/</link>
      <pubDate>Thu, 18 Jul 2024 18:00:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97%E6%8E%A7%E5%88%B6%E4%B8%8E-p2p-%E6%89%93%E6%B4%9E%E7%BB%86%E8%8A%82/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在上一篇文章中，我们深入剖析了 NPS 客户端的核心 &lt;code&gt;client.go&lt;/code&gt;，了解了其连接管理和流量转发机制。本篇文章将继续探索 NPS 客户端的其他辅助模块，特别是 &lt;code&gt;nps/client/control.go&lt;/code&gt; 文件。这个文件包含了客户端的一些控制逻辑，例如获取任务状态、从配置文件启动客户端，以及一些 P2P UDP 打洞相关的辅助函数。&lt;/p&gt;&#xA;&lt;h2 id=&#34;controlgo客户端的控制中心&#34;&gt;&lt;code&gt;control.go&lt;/code&gt;：客户端的控制中心&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;control.go&lt;/code&gt; 文件提供了客户端的一些高级控制功能，使得用户可以通过配置文件或命令行参数来管理客户端的行为。&lt;/p&gt;&#xA;&lt;h3 id=&#34;tls-加密控制&#34;&gt;TLS 加密控制&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;control.go&lt;/code&gt; 中定义了 &lt;code&gt;tlsEnable1&lt;/code&gt; 变量以及 &lt;code&gt;SetTlsEnable()&lt;/code&gt; 和 &lt;code&gt;GetTlsEnable()&lt;/code&gt; 函数，用于控制客户端与服务端之间是否启用 TLS 加密。这为用户提供了在客户端层面配置加密传输的灵活性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 客户端核心解析：连接管理与流量转发</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A0%B8%E5%BF%83%E8%A7%A3%E6%9E%90%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86%E4%B8%8E%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Thu, 18 Jul 2024 17:45:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A0%B8%E5%BF%83%E8%A7%A3%E6%9E%90%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86%E4%B8%8E%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 系列文章的前几篇中，我们详细剖析了 NPS 服务端的各个模块和代理实现。本篇文章将转向 NPS 的 &lt;strong&gt;客户端（Client）&lt;/strong&gt; 模块，深入分析 &lt;code&gt;nps/client/client.go&lt;/code&gt; 文件。这个文件是 NPS 客户端的“大脑”，负责与服务端建立连接、管理隧道、处理不同类型的流量以及维护客户端的生命周期。理解客户端的运作机制，是掌握 NPS 完整内网穿透流程的关键。&lt;/p&gt;&#xA;&lt;h2 id=&#34;clientgo客户端的大脑&#34;&gt;&lt;code&gt;client.go&lt;/code&gt;：客户端的“大脑”&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;client.go&lt;/code&gt; 文件定义了 &lt;code&gt;TRPClient&lt;/code&gt; 结构体，它是 NPS 客户端的核心。它负责客户端的启动、与服务端的通信、隧道管理以及流量转发。&lt;/p&gt;&#xA;&lt;h3 id=&#34;trpclient-结构体&#34;&gt;&lt;code&gt;TRPClient&lt;/code&gt; 结构体&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;TRPClient&lt;/code&gt; 结构体包含了客户端运行所需的所有关键信息：&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 代理实现：HTTP/HTTPS 域名解析与高级功能</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0http/https-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E4%B8%8E%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Thu, 18 Jul 2024 17:30:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0http/https-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E4%B8%8E%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 系列文章中，我们已经深入探讨了 NPS 的多种代理模式。本篇文章将聚焦于 NPS 的 &lt;strong&gt;HTTP/HTTPS 域名解析&lt;/strong&gt;功能，这是 NPS 实现 Web 服务穿透的核心。我们将通过分析 &lt;code&gt;nps/server/proxy/http.go&lt;/code&gt; 文件，揭示 NPS 如何处理 HTTP 和 HTTPS 请求，并实现缓存、认证、动态后端切换等高级功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;httphttps-域名解析的需求&#34;&gt;HTTP/HTTPS 域名解析的需求&lt;/h2&gt;&#xA;&lt;p&gt;在实际应用中，我们经常需要将内网的 Web 服务通过域名暴露到公网。这涉及到：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;域名到内网 IP 的映射&lt;/strong&gt;：根据请求的域名，将流量转发到内网中对应的 Web 服务器。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HTTP/HTTPS 协议处理&lt;/strong&gt;：NPS 需要能够处理标准的 HTTP 请求，以及加密的 HTTPS 请求。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;高级功能&lt;/strong&gt;：为了提升性能、安全性和灵活性，通常还需要支持缓存、认证、负载均衡、自动 HTTPS 等功能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;httpgohttphttps-域名解析的实现&#34;&gt;&lt;code&gt;http.go&lt;/code&gt;：HTTP/HTTPS 域名解析的实现&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;http.go&lt;/code&gt; 文件定义了 &lt;code&gt;httpServer&lt;/code&gt; 结构体，它是 NPS 实现 HTTP/HTTPS 域名解析的核心。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 代理实现：HTTPS 代理与 SNI 证书管理</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0https-%E4%BB%A3%E7%90%86%E4%B8%8E-sni-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/</link>
      <pubDate>Thu, 18 Jul 2024 17:15:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0https-%E4%BB%A3%E7%90%86%E4%B8%8E-sni-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 系列文章中，我们已经探讨了 NPS 的整体架构、服务端核心以及多种代理模式。本篇文章将深入 NPS 的 &lt;strong&gt;HTTPS 代理&lt;/strong&gt;实现。我们将通过分析 &lt;code&gt;nps/server/proxy/https.go&lt;/code&gt; 文件，揭示 NPS 如何处理加密的 HTTPS 流量，特别是其对 SNI（Server Name Indication）的支持和多证书管理机制。&lt;/p&gt;&#xA;&lt;h2 id=&#34;https-代理的需求与挑战&#34;&gt;HTTPS 代理的需求与挑战&lt;/h2&gt;&#xA;&lt;p&gt;HTTPS 代理比普通的 HTTP 代理更为复杂，因为它涉及到 SSL/TLS 加密。主要挑战包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;SSL/TLS 握手&lt;/strong&gt;：代理服务器需要参与 SSL/TLS 握手过程，解密客户端请求，然后加密转发给目标服务器，或者直接将加密流量转发给目标服务器。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;SNI 支持&lt;/strong&gt;：为了在同一个 IP 地址上托管多个 HTTPS 网站，客户端在 SSL/TLS 握手时会通过 SNI 扩展告知服务器其要访问的域名。代理服务器需要根据 SNI 信息选择正确的证书。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;证书管理&lt;/strong&gt;：代理服务器需要能够管理和加载多个域名的 SSL/TLS 证书。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;httpsgohttps-代理的实现&#34;&gt;&lt;code&gt;https.go&lt;/code&gt;：HTTPS 代理的实现&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;https.go&lt;/code&gt; 文件定义了 &lt;code&gt;HttpsServer&lt;/code&gt; 结构体，它是 NPS 实现 HTTPS 代理的核心。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 代理实现：WebSocket 代理与 HTTP 反向代理</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0websocket-%E4%BB%A3%E7%90%86%E4%B8%8E-http-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link>
      <pubDate>Thu, 18 Jul 2024 17:00:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0websocket-%E4%BB%A3%E7%90%86%E4%B8%8E-http-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 系列文章的前几篇中，我们已经探讨了 NPS 的整体架构、服务端核心以及多种代理模式（TCP 隧道、HTTP 代理、SOCKS5 代理、P2P 代理和 UDP 代理）。本篇文章将深入 NPS 的 &lt;strong&gt;WebSocket 代理&lt;/strong&gt;和 &lt;strong&gt;HTTP 反向代理&lt;/strong&gt;实现。我们将通过分析 &lt;code&gt;nps/server/proxy/websocket.go&lt;/code&gt; 文件，揭示 NPS 如何处理这两种特殊的 HTTP 流量，实现更灵活的网络穿透。&lt;/p&gt;&#xA;&lt;h2 id=&#34;websocket-与-http-反向代理的需求&#34;&gt;WebSocket 与 HTTP 反向代理的需求&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;WebSocket&lt;/strong&gt;：提供客户端和服务器之间的全双工通信通道，常用于实时应用，如聊天、在线游戏、股票行情等。传统的 HTTP 代理无法直接处理 WebSocket 协议的升级和持续连接。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HTTP 反向代理&lt;/strong&gt;：将客户端的 HTTP 请求转发到后端服务器，并返回后端服务器的响应。它通常用于负载均衡、SSL 卸载、缓存和安全防护等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;websocketgowebsocket-与-http-反向代理的实现&#34;&gt;&lt;code&gt;websocket.go&lt;/code&gt;：WebSocket 与 HTTP 反向代理的实现&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;websocket.go&lt;/code&gt; 文件主要定义了 &lt;code&gt;HttpReverseProxy&lt;/code&gt; 和 &lt;code&gt;ReverseProxy&lt;/code&gt; 两个结构体，它们共同协作来处理 HTTP 反向代理和 WebSocket 连接。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 代理实现：UDP 代理与数据转发</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0udp-%E4%BB%A3%E7%90%86%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Thu, 18 Jul 2024 16:45:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0udp-%E4%BB%A3%E7%90%86%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8F%91/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 系列文章中，我们已经探讨了 NPS 的整体架构、服务端核心以及多种 TCP 相关的代理模式（TCP 隧道、HTTP 代理、SOCKS5 代理）和 P2P 代理。本篇文章将聚焦于 NPS 的 &lt;strong&gt;UDP 代理&lt;/strong&gt;实现。我们将通过分析 &lt;code&gt;nps/server/proxy/udp.go&lt;/code&gt; 文件，揭示 NPS 如何处理 UDP 流量，实现内网 UDP 服务的穿透。&lt;/p&gt;&#xA;&lt;h2 id=&#34;udp-代理的需求与挑战&#34;&gt;UDP 代理的需求与挑战&lt;/h2&gt;&#xA;&lt;p&gt;UDP（User Datagram Protocol）是一种无连接的传输协议，常用于对实时性要求较高、允许少量丢包的应用，如 DNS 查询、在线游戏、音视频通话等。由于 UDP 的无连接特性，其代理实现与 TCP 代理有所不同，主要挑战在于：&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 代理实现：P2P 协议与 UDP 打洞</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0p2p-%E5%8D%8F%E8%AE%AE%E4%B8%8E-udp-%E6%89%93%E6%B4%9E/</link>
      <pubDate>Thu, 18 Jul 2024 16:30:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0p2p-%E5%8D%8F%E8%AE%AE%E4%B8%8E-udp-%E6%89%93%E6%B4%9E/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 系列文章中，我们已经探讨了 NPS 的整体架构、服务端核心以及 TCP 隧道、HTTP 代理和 SOCKS5 代理的实现。本篇文章将深入 NPS 的另一个高级代理模式——&lt;strong&gt;P2P 代理&lt;/strong&gt;。我们将通过分析 &lt;code&gt;nps/server/proxy/p2p.go&lt;/code&gt; 文件，揭示 NPS 如何利用 UDP 打洞技术，实现客户端之间的直接连接，从而在某些场景下提供更高效、更低延迟的内网穿透服务。&lt;/p&gt;&#xA;&lt;h2 id=&#34;p2p-代理的优势与挑战&#34;&gt;P2P 代理的优势与挑战&lt;/h2&gt;&#xA;&lt;p&gt;传统的内网穿透通常依赖于服务器进行数据中转，这会引入额外的延迟和带宽消耗。P2P（Peer-to-Peer）代理的目标是让内网中的两个客户端能够直接建立连接，绕过服务器中转，从而实现更高效的数据传输。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 代理实现：SOCKS5 协议深度解析</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0socks5-%E5%8D%8F%E8%AE%AE%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 18 Jul 2024 16:15:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0socks5-%E5%8D%8F%E8%AE%AE%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 系列文章的前几篇中，我们已经对 NPS 的整体架构、服务端核心以及 TCP 隧道和 HTTP 代理的实现有了初步了解。本篇文章将深入 NPS 的另一个重要代理模式——&lt;strong&gt;SOCKS5 代理&lt;/strong&gt;。我们将通过分析 &lt;code&gt;nps/server/proxy/socks5.go&lt;/code&gt; 文件，详细剖析 SOCKS5 协议在 NPS 中的实现细节，包括认证机制、请求处理以及 UDP 转发。&lt;/p&gt;&#xA;&lt;h2 id=&#34;socks5-协议简介&#34;&gt;SOCKS5 协议简介&lt;/h2&gt;&#xA;&lt;p&gt;SOCKS5 是一种网络代理协议，它允许客户端通过代理服务器间接访问其他服务器。与 HTTP 代理不同，SOCKS5 是一种更底层的协议，它不关心应用层协议（如 HTTP、FTP），而是直接转发 TCP 或 UDP 数据包。这使得 SOCKS5 代理更加通用，可以用于各种网络应用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 代理实现：TCP 隧道与 HTTP 代理</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0tcp-%E9%9A%A7%E9%81%93%E4%B8%8E-http-%E4%BB%A3%E7%90%86/</link>
      <pubDate>Thu, 18 Jul 2024 16:00:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0tcp-%E9%9A%A7%E9%81%93%E4%B8%8E-http-%E4%BB%A3%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在上一篇文章中，我们深入探讨了 &lt;code&gt;nps/server/proxy/base.go&lt;/code&gt; 中定义的通用代理基础和流量控制机制。本篇文章将聚焦于 NPS 最常用也是最基础的两种代理模式：&lt;strong&gt;TCP 隧道&lt;/strong&gt;和 &lt;strong&gt;HTTP 代理&lt;/strong&gt;。我们将通过分析 &lt;code&gt;nps/server/proxy/tcp.go&lt;/code&gt; 文件，揭示这两种模式的具体实现细节。&lt;/p&gt;&#xA;&lt;h2 id=&#34;tcpgotcp-隧道与-http-代理的实现&#34;&gt;&lt;code&gt;tcp.go&lt;/code&gt;：TCP 隧道与 HTTP 代理的实现&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;tcp.go&lt;/code&gt; 文件主要定义了 &lt;code&gt;TunnelModeServer&lt;/code&gt; 结构体，它是实现 TCP 隧道和 HTTP 代理的核心。此外，该文件还包含了 &lt;code&gt;WebServer&lt;/code&gt; 结构体，用于启动 NPS 的 Web 管理界面。&lt;/p&gt;&#xA;&lt;h3 id=&#34;tunnelmodeserver通用隧道模式服务器&#34;&gt;&lt;code&gt;TunnelModeServer&lt;/code&gt;：通用隧道模式服务器&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;TunnelModeServer&lt;/code&gt; 结构体继承了 &lt;code&gt;BaseServer&lt;/code&gt;，并增加了两个特定于隧道模式的字段：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TunnelModeServer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;BaseServer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;listener&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Listener&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;BaseServer&lt;/code&gt;：继承了 &lt;code&gt;base.go&lt;/code&gt; 中定义的通用功能，如流量统计、安全检查等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;process process&lt;/code&gt;：这是一个函数类型 &lt;code&gt;type process func(c *conn.Conn, s *TunnelModeServer) error&lt;/code&gt;，它定义了如何处理传入的客户端连接。不同的代理模式会传入不同的 &lt;code&gt;process&lt;/code&gt; 函数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;listener net.Listener&lt;/code&gt;：用于监听传入连接的网络监听器。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;NewTunnelModeServer()&lt;/code&gt; 函数用于创建并初始化一个 &lt;code&gt;TunnelModeServer&lt;/code&gt; 实例。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 代理实现：通用基础与流量控制</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Thu, 18 Jul 2024 15:45:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 服务端核心解析中，我们了解了 &lt;code&gt;server.go&lt;/code&gt; 如何作为服务端的“大脑”，协调各项任务。本篇文章将深入 NPS 的代理实现细节，从 &lt;code&gt;nps/server/proxy/base.go&lt;/code&gt; 文件入手，剖析所有代理服务共用的基础结构、接口定义以及流量控制、安全检查等通用逻辑。理解这些通用组件，有助于我们更好地把握 NPS 多样化代理模式的实现原理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;basego代理服务的基石&#34;&gt;&lt;code&gt;base.go&lt;/code&gt;：代理服务的基石&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;base.go&lt;/code&gt; 文件定义了 NPS 中所有代理服务的基础抽象和通用功能。它确保了不同代理模式（如 TCP、UDP、SOCKS5、HTTP 等）能够遵循统一的接口规范，并共享一些核心的辅助功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 服务端核心解析：架构与流量管理</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A0%B8%E5%BF%83%E8%A7%A3%E6%9E%90%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%B5%81%E9%87%8F%E7%AE%A1%E7%90%86/</link>
      <pubDate>Thu, 18 Jul 2024 15:30:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A0%B8%E5%BF%83%E8%A7%A3%E6%9E%90%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%B5%81%E9%87%8F%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 项目概述中，我们对这款强大的内网穿透工具进行了宏观的介绍。本篇文章将深入 NPS 的服务端（Server）核心，从 &lt;code&gt;nps/server/server.go&lt;/code&gt; 文件入手，详细剖析其架构设计、任务管理、流量处理以及系统监控等关键功能。理解 &lt;code&gt;server.go&lt;/code&gt; 的运作机制，是掌握 NPS 核心原理的基石。&lt;/p&gt;&#xA;&lt;h2 id=&#34;servergo服务端的大脑&#34;&gt;&lt;code&gt;server.go&lt;/code&gt;：服务端的“大脑”&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt; 文件是 NPS 服务端的启动入口和主要协调者。它负责初始化各项服务、管理客户端连接、调度隧道任务以及收集系统运行状态。&lt;/p&gt;&#xA;&lt;h3 id=&#34;核心组件概览&#34;&gt;核心组件概览&lt;/h3&gt;&#xA;&lt;p&gt;在 &lt;code&gt;server.go&lt;/code&gt; 中，我们可以看到几个关键的全局变量和结构：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Bridge *bridge.Bridge&lt;/code&gt;：这是服务端与客户端之间通信的核心桥梁。它负责维护客户端连接、处理客户端发送的指令以及转发数据。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;RunList sync.Map&lt;/code&gt;：一个并发安全的 Map，用于存储当前正在运行的所有隧道（&lt;code&gt;proxy.Service&lt;/code&gt; 实例）。通过 &lt;code&gt;sync.Map&lt;/code&gt;，NPS 能够高效地管理和访问多个并发的隧道服务。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;once sync.Once&lt;/code&gt;：用于确保某些初始化操作（如 &lt;code&gt;flowSession&lt;/code&gt;）只执行一次。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;初始化与任务加载&#34;&gt;初始化与任务加载&lt;/h3&gt;&#xA;&lt;p&gt;服务端的启动从初始化开始：&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 项目概述：内网穿透利器</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%88%A9%E5%99%A8/</link>
      <pubDate>Thu, 18 Jul 2024 15:00:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%88%A9%E5%99%A8/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在现代网络环境中，内网穿透技术扮演着越来越重要的角色。无论是进行本地开发调试、远程访问内网资源，还是搭建个人服务，内网穿透都能提供极大的便利。今天，我们将深入剖析一个功能强大、性能卓越的内网穿透代理服务器项目——NPS。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-nps&#34;&gt;什么是 NPS？&lt;/h2&gt;&#xA;&lt;p&gt;NPS 是一款轻量级、高性能、功能强大的&lt;strong&gt;内网穿透&lt;/strong&gt;代理服务器。它旨在帮助用户轻松实现内网资源的外部访问，打破网络边界的限制。NPS 不仅仅是一个简单的端口转发工具，它更是一个集多种代理协议、Web 管理界面和丰富扩展功能于一体的综合性解决方案。&lt;/p&gt;</description>
    </item>
    <item>
      <title>大模型智能体构建：从理论到实践</title>
      <link>https://axfinn.github.io/blog/2024-07/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%99%BA%E8%83%BD%E4%BD%93%E6%9E%84%E5%BB%BA%E4%BB%8E%E7%90%86%E8%AE%BA%E5%88%B0%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 18 Jul 2024 14:48:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%99%BA%E8%83%BD%E4%BD%93%E6%9E%84%E5%BB%BA%E4%BB%8E%E7%90%86%E8%AE%BA%E5%88%B0%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;随着大型语言模型（LLM）的飞速发展，构建能够自主感知、决策和行动的智能体（Agent）成为了人工智能领域的热点。大模型智能体不仅能够理解复杂的指令，还能通过与环境的交互，完成一系列任务。本文将深入探讨大模型智能体的构建原理、核心组件以及实践中的挑战与机遇。&lt;/p&gt;&#xA;&lt;h2 id=&#34;大模型智能体的核心组件&#34;&gt;大模型智能体的核心组件&lt;/h2&gt;&#xA;&lt;p&gt;一个典型的大模型智能体通常包含以下几个核心组件：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;感知模块（Perception Module）&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：负责从环境中获取信息，并将其转化为LLM可以理解的格式。这是智能体与外部世界交互的第一步。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;输入模态&lt;/strong&gt;：可以处理多种模态的数据，包括但不限于：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;文本&lt;/strong&gt;：网页内容、文档、聊天记录、数据库查询结果等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;图像/视频&lt;/strong&gt;：通过图像识别、OCR（光学字符识别）、视频分析模型提取视觉信息。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;音频&lt;/strong&gt;：通过语音识别（ASR）将语音转化为文本。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;结构化数据&lt;/strong&gt;：如JSON、XML、CSV等，需要解析并转化为自然语言描述或LLM可理解的格式。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;关键技术&lt;/strong&gt;：数据预处理、特征提取、多模态信息融合、特定领域的解析器。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;规划模块（Planning Module）&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>一句话命令</title>
      <link>https://axfinn.github.io/blog/2020-10/%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2020-10/%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%91%BD%E4%BB%A4/</guid>
      <description>&lt;h2 id=&#34;常用一句话命令&#34;&gt;常用一句话命令&lt;/h2&gt;&#xA;&lt;h3 id=&#34;网络&#34;&gt;网络&lt;/h3&gt;&#xA;&lt;p&gt;监听端口：&lt;code&gt;netstat -tnple&lt;/code&gt; ，如果没有安装软件包 &lt;code&gt;net-tools&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;linux系统排查&#34;&gt;LINUX系统排查&lt;/h3&gt;&#xA;&lt;h3 id=&#34;快速下载&#34;&gt;快速下载&lt;/h3&gt;&#xA;&lt;h3 id=&#34;数据库&#34;&gt;数据库&lt;/h3&gt;&#xA;&lt;p&gt;数据库备份：&lt;/p&gt;&#xA;&lt;p&gt;备份脚本：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin//bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export NOW&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%Y-%m-%d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export DATA_DIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;backup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export DATA_DATABASE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dress&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mysqldump --opt -uroot  -p&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;P@ssw0rd&amp;#39;&lt;/span&gt; -h&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h2.jaxiu.cn&amp;#39;&lt;/span&gt; $DATA_DATABASE &amp;gt; $DATA_DIR/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;DATA_DATABASE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;_$NOW.sql&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一句话 docker 命令：&#xA;&lt;code&gt;docker run -ti --name mysql_dump -v /root/x/scripts/mysql_backup.sh:/mysql_backup.sh -v /root/x/scripts/backup:/backup:rw mysql:5.7.16 ./mysql_backup.sh&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;删除已有历史备份&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;find $DATA_DIR/ -type f -name &amp;quot;*.sql&amp;quot; -mtime +7 -exec rm -rf {} \;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;数据库查询一句话命令&lt;/p&gt;&#xA;&lt;p&gt;单引号引起来的起来的是命令&#xA;&lt;code&gt;docker run -ti --name mysql_t mysql:5.7.16 &#39; mysql -u root -proot -h 10.105.40.49 -e &amp;quot;show databases&amp;quot;&#39; ; docker stop mysql_t;docker rm mysql_t;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;一句话命令开启http访问当前页面&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker run -dti --name nginx_t -v /tmp/test:/usr/share/nginx/html -p 8080:80 nginx&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;linux-快捷命令&#34;&gt;linux 快捷命令&lt;/h3&gt;</description>
    </item>
  </channel>
</rss>
