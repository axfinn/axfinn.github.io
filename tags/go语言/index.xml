<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go语言 on jaxiu He</title>
    <link>https://axfinn.github.io/tags/go%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in Go语言 on jaxiu He</description>
    <generator>Hugo</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Thu, 18 Jul 2024 16:00:00 +0800</lastBuildDate>
    <atom:link href="https://axfinn.github.io/tags/go%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NPS 代理实现：TCP 隧道与 HTTP 代理</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0tcp-%E9%9A%A7%E9%81%93%E4%B8%8E-http-%E4%BB%A3%E7%90%86/</link>
      <pubDate>Thu, 18 Jul 2024 16:00:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0tcp-%E9%9A%A7%E9%81%93%E4%B8%8E-http-%E4%BB%A3%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在上一篇文章中，我们深入探讨了 &lt;code&gt;nps/server/proxy/base.go&lt;/code&gt; 中定义的通用代理基础和流量控制机制。本篇文章将聚焦于 NPS 最常用也是最基础的两种代理模式：&lt;strong&gt;TCP 隧道&lt;/strong&gt;和 &lt;strong&gt;HTTP 代理&lt;/strong&gt;。我们将通过分析 &lt;code&gt;nps/server/proxy/tcp.go&lt;/code&gt; 文件，揭示这两种模式的具体实现细节。&lt;/p&gt;&#xA;&lt;h2 id=&#34;tcpgotcp-隧道与-http-代理的实现&#34;&gt;&lt;code&gt;tcp.go&lt;/code&gt;：TCP 隧道与 HTTP 代理的实现&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;tcp.go&lt;/code&gt; 文件主要定义了 &lt;code&gt;TunnelModeServer&lt;/code&gt; 结构体，它是实现 TCP 隧道和 HTTP 代理的核心。此外，该文件还包含了 &lt;code&gt;WebServer&lt;/code&gt; 结构体，用于启动 NPS 的 Web 管理界面。&lt;/p&gt;&#xA;&lt;h3 id=&#34;tunnelmodeserver通用隧道模式服务器&#34;&gt;&lt;code&gt;TunnelModeServer&lt;/code&gt;：通用隧道模式服务器&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;TunnelModeServer&lt;/code&gt; 结构体继承了 &lt;code&gt;BaseServer&lt;/code&gt;，并增加了两个特定于隧道模式的字段：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TunnelModeServer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;BaseServer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;listener&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Listener&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;BaseServer&lt;/code&gt;：继承了 &lt;code&gt;base.go&lt;/code&gt; 中定义的通用功能，如流量统计、安全检查等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;process process&lt;/code&gt;：这是一个函数类型 &lt;code&gt;type process func(c *conn.Conn, s *TunnelModeServer) error&lt;/code&gt;，它定义了如何处理传入的客户端连接。不同的代理模式会传入不同的 &lt;code&gt;process&lt;/code&gt; 函数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;listener net.Listener&lt;/code&gt;：用于监听传入连接的网络监听器。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;NewTunnelModeServer()&lt;/code&gt; 函数用于创建并初始化一个 &lt;code&gt;TunnelModeServer&lt;/code&gt; 实例。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 代理实现：通用基础与流量控制</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Thu, 18 Jul 2024 15:45:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 服务端核心解析中，我们了解了 &lt;code&gt;server.go&lt;/code&gt; 如何作为服务端的“大脑”，协调各项任务。本篇文章将深入 NPS 的代理实现细节，从 &lt;code&gt;nps/server/proxy/base.go&lt;/code&gt; 文件入手，剖析所有代理服务共用的基础结构、接口定义以及流量控制、安全检查等通用逻辑。理解这些通用组件，有助于我们更好地把握 NPS 多样化代理模式的实现原理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;basego代理服务的基石&#34;&gt;&lt;code&gt;base.go&lt;/code&gt;：代理服务的基石&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;base.go&lt;/code&gt; 文件定义了 NPS 中所有代理服务的基础抽象和通用功能。它确保了不同代理模式（如 TCP、UDP、SOCKS5、HTTP 等）能够遵循统一的接口规范，并共享一些核心的辅助功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 服务端核心解析：架构与流量管理</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A0%B8%E5%BF%83%E8%A7%A3%E6%9E%90%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%B5%81%E9%87%8F%E7%AE%A1%E7%90%86/</link>
      <pubDate>Thu, 18 Jul 2024 15:30:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A0%B8%E5%BF%83%E8%A7%A3%E6%9E%90%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%B5%81%E9%87%8F%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 项目概述中，我们对这款强大的内网穿透工具进行了宏观的介绍。本篇文章将深入 NPS 的服务端（Server）核心，从 &lt;code&gt;nps/server/server.go&lt;/code&gt; 文件入手，详细剖析其架构设计、任务管理、流量处理以及系统监控等关键功能。理解 &lt;code&gt;server.go&lt;/code&gt; 的运作机制，是掌握 NPS 核心原理的基石。&lt;/p&gt;&#xA;&lt;h2 id=&#34;servergo服务端的大脑&#34;&gt;&lt;code&gt;server.go&lt;/code&gt;：服务端的“大脑”&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt; 文件是 NPS 服务端的启动入口和主要协调者。它负责初始化各项服务、管理客户端连接、调度隧道任务以及收集系统运行状态。&lt;/p&gt;&#xA;&lt;h3 id=&#34;核心组件概览&#34;&gt;核心组件概览&lt;/h3&gt;&#xA;&lt;p&gt;在 &lt;code&gt;server.go&lt;/code&gt; 中，我们可以看到几个关键的全局变量和结构：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Bridge *bridge.Bridge&lt;/code&gt;：这是服务端与客户端之间通信的核心桥梁。它负责维护客户端连接、处理客户端发送的指令以及转发数据。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;RunList sync.Map&lt;/code&gt;：一个并发安全的 Map，用于存储当前正在运行的所有隧道（&lt;code&gt;proxy.Service&lt;/code&gt; 实例）。通过 &lt;code&gt;sync.Map&lt;/code&gt;，NPS 能够高效地管理和访问多个并发的隧道服务。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;once sync.Once&lt;/code&gt;：用于确保某些初始化操作（如 &lt;code&gt;flowSession&lt;/code&gt;）只执行一次。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;初始化与任务加载&#34;&gt;初始化与任务加载&lt;/h3&gt;&#xA;&lt;p&gt;服务端的启动从初始化开始：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
