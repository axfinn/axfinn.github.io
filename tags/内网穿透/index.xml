<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>内网穿透 on jaxiu He</title>
    <link>https://axfinn.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</link>
    <description>Recent content in 内网穿透 on jaxiu He</description>
    <generator>Hugo</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Thu, 18 Jul 2024 17:45:00 +0800</lastBuildDate>
    <atom:link href="https://axfinn.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NPS 客户端核心解析：连接管理与流量转发</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A0%B8%E5%BF%83%E8%A7%A3%E6%9E%90%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86%E4%B8%8E%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Thu, 18 Jul 2024 17:45:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A0%B8%E5%BF%83%E8%A7%A3%E6%9E%90%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86%E4%B8%8E%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 系列文章的前几篇中，我们详细剖析了 NPS 服务端的各个模块和代理实现。本篇文章将转向 NPS 的 &lt;strong&gt;客户端（Client）&lt;/strong&gt; 模块，深入分析 &lt;code&gt;nps/client/client.go&lt;/code&gt; 文件。这个文件是 NPS 客户端的“大脑”，负责与服务端建立连接、管理隧道、处理不同类型的流量以及维护客户端的生命周期。理解客户端的运作机制，是掌握 NPS 完整内网穿透流程的关键。&lt;/p&gt;&#xA;&lt;h2 id=&#34;clientgo客户端的大脑&#34;&gt;&lt;code&gt;client.go&lt;/code&gt;：客户端的“大脑”&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;client.go&lt;/code&gt; 文件定义了 &lt;code&gt;TRPClient&lt;/code&gt; 结构体，它是 NPS 客户端的核心。它负责客户端的启动、与服务端的通信、隧道管理以及流量转发。&lt;/p&gt;&#xA;&lt;h3 id=&#34;trpclient-结构体&#34;&gt;&lt;code&gt;TRPClient&lt;/code&gt; 结构体&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;TRPClient&lt;/code&gt; 结构体包含了客户端运行所需的所有关键信息：&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 代理实现：UDP 代理与数据转发</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0udp-%E4%BB%A3%E7%90%86%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Thu, 18 Jul 2024 16:45:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0udp-%E4%BB%A3%E7%90%86%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8F%91/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在 NPS 系列文章中，我们已经探讨了 NPS 的整体架构、服务端核心以及多种 TCP 相关的代理模式（TCP 隧道、HTTP 代理、SOCKS5 代理）和 P2P 代理。本篇文章将聚焦于 NPS 的 &lt;strong&gt;UDP 代理&lt;/strong&gt;实现。我们将通过分析 &lt;code&gt;nps/server/proxy/udp.go&lt;/code&gt; 文件，揭示 NPS 如何处理 UDP 流量，实现内网 UDP 服务的穿透。&lt;/p&gt;&#xA;&lt;h2 id=&#34;udp-代理的需求与挑战&#34;&gt;UDP 代理的需求与挑战&lt;/h2&gt;&#xA;&lt;p&gt;UDP（User Datagram Protocol）是一种无连接的传输协议，常用于对实时性要求较高、允许少量丢包的应用，如 DNS 查询、在线游戏、音视频通话等。由于 UDP 的无连接特性，其代理实现与 TCP 代理有所不同，主要挑战在于：&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 代理实现：TCP 隧道与 HTTP 代理</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0tcp-%E9%9A%A7%E9%81%93%E4%B8%8E-http-%E4%BB%A3%E7%90%86/</link>
      <pubDate>Thu, 18 Jul 2024 16:00:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0tcp-%E9%9A%A7%E9%81%93%E4%B8%8E-http-%E4%BB%A3%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在上一篇文章中，我们深入探讨了 &lt;code&gt;nps/server/proxy/base.go&lt;/code&gt; 中定义的通用代理基础和流量控制机制。本篇文章将聚焦于 NPS 最常用也是最基础的两种代理模式：&lt;strong&gt;TCP 隧道&lt;/strong&gt;和 &lt;strong&gt;HTTP 代理&lt;/strong&gt;。我们将通过分析 &lt;code&gt;nps/server/proxy/tcp.go&lt;/code&gt; 文件，揭示这两种模式的具体实现细节。&lt;/p&gt;&#xA;&lt;h2 id=&#34;tcpgotcp-隧道与-http-代理的实现&#34;&gt;&lt;code&gt;tcp.go&lt;/code&gt;：TCP 隧道与 HTTP 代理的实现&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;tcp.go&lt;/code&gt; 文件主要定义了 &lt;code&gt;TunnelModeServer&lt;/code&gt; 结构体，它是实现 TCP 隧道和 HTTP 代理的核心。此外，该文件还包含了 &lt;code&gt;WebServer&lt;/code&gt; 结构体，用于启动 NPS 的 Web 管理界面。&lt;/p&gt;&#xA;&lt;h3 id=&#34;tunnelmodeserver通用隧道模式服务器&#34;&gt;&lt;code&gt;TunnelModeServer&lt;/code&gt;：通用隧道模式服务器&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;TunnelModeServer&lt;/code&gt; 结构体继承了 &lt;code&gt;BaseServer&lt;/code&gt;，并增加了两个特定于隧道模式的字段：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TunnelModeServer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;BaseServer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;listener&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Listener&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;BaseServer&lt;/code&gt;：继承了 &lt;code&gt;base.go&lt;/code&gt; 中定义的通用功能，如流量统计、安全检查等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;process process&lt;/code&gt;：这是一个函数类型 &lt;code&gt;type process func(c *conn.Conn, s *TunnelModeServer) error&lt;/code&gt;，它定义了如何处理传入的客户端连接。不同的代理模式会传入不同的 &lt;code&gt;process&lt;/code&gt; 函数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;listener net.Listener&lt;/code&gt;：用于监听传入连接的网络监听器。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;NewTunnelModeServer()&lt;/code&gt; 函数用于创建并初始化一个 &lt;code&gt;TunnelModeServer&lt;/code&gt; 实例。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NPS 项目概述：内网穿透利器</title>
      <link>https://axfinn.github.io/blog/2024-07/nps-%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%88%A9%E5%99%A8/</link>
      <pubDate>Thu, 18 Jul 2024 15:00:00 +0800</pubDate>
      <guid>https://axfinn.github.io/blog/2024-07/nps-%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%88%A9%E5%99%A8/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在现代网络环境中，内网穿透技术扮演着越来越重要的角色。无论是进行本地开发调试、远程访问内网资源，还是搭建个人服务，内网穿透都能提供极大的便利。今天，我们将深入剖析一个功能强大、性能卓越的内网穿透代理服务器项目——NPS。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-nps&#34;&gt;什么是 NPS？&lt;/h2&gt;&#xA;&lt;p&gt;NPS 是一款轻量级、高性能、功能强大的&lt;strong&gt;内网穿透&lt;/strong&gt;代理服务器。它旨在帮助用户轻松实现内网资源的外部访问，打破网络边界的限制。NPS 不仅仅是一个简单的端口转发工具，它更是一个集多种代理协议、Web 管理界面和丰富扩展功能于一体的综合性解决方案。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
